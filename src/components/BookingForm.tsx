import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Loader2 } from "lucide-react";

export const BookingForm = () => {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    service: "",
    message: ""
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!formData.name.trim() || !formData.phone.trim() || !formData.service.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      setIsLoading(false);
      return;
    }

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
      const messageText = `
üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!
üë§ –ò–º—è: ${formData.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üíÖ –£—Å–ª—É–≥–∞: ${formData.service}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.message || "–ù–µ —É–∫–∞–∑–∞–Ω"}
      `.trim();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      const response = await fetch(`https://api.telegram.org/bot8317782207:AAE-_2JU1Ak4vEXi-s2MGMjWoZcYefCvBDw/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: '8317782207',
          text: messageText,
          parse_mode: 'HTML'
        }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
      }

      toast({
        title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        description: "–Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
      });

      setFormData({
        name: "",
        phone: "",
        service: "",
        message: ""
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <section id="booking" className="py-20 bg-background">
      <div className="container mx-auto px-4 sm:px-6">
        <div className="max-w-2xl mx-auto">
          <div className="text-center mb-12 space-y-4">
            <h2 className="text-4xl sm:text-5xl font-light text-foreground">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</h2>
            <p className="text-muted-foreground text-lg">–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏</p>
          </div>

          <Card className="p-8 border-border/50 shadow-xl">
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="name">–í–∞—à–µ –∏–º—è *</Label>
                <Input
                  id="name"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  required
                  className="border-border"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
                <Input
                  id="phone"
                  type="tel"
                  placeholder="+7 (___) ___-__-__"
                  value={formData.phone}
                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                  required
                  className="border-border"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="service">–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ *</Label>
                <Input
                  id="service"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∏–∫—Ä–æ–±–ª–µ–π–¥–∏–Ω–≥ –±—Ä–æ–≤–µ–π"
                  value={formData.service}
                  onChange={(e) => setFormData({ ...formData, service: e.target.value })}
                  required
                  className="border-border"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="message">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</Label>
                <Textarea
                  id="message"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã"
                  value={formData.message}
                  onChange={(e) => setFormData({ ...formData, message: e.target.value })}
                  className="border-border min-h-[100px]"
                />
              </div>

              <Button
                type="submit"
                disabled={isLoading}
                className="w-full bg-primary hover:bg-primary/90 text-primary-foreground py-6 text-lg rounded-full"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
                )}
              </Button>

              <p className="text-sm text-muted-foreground text-center">
                –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
              </p>
            </form>
          </Card>
        </div>
      </div>
    </section>
  );
};
